name: CI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  # https://github.com/marketplace/actions/build-tag-number
  # Increase version ${{needs.version_increase.outputs.build_number}}
  version_increase:
    runs-on: ubuntu-latest
    outputs:
      build_number: ${{ steps.buildnumber.outputs.build_number }}
    steps:
      - name: Generate build number
        id: buildnumber
        uses: onyxmueller/build-tag-number@v1
        with:
          token: ${{ secrets.actions_token }}
      - name: Print new build number
        run: echo "Build number is $BUILD_NUMBER"

  validate_gradle:
    name: Validate gradle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1


  build:
    name: Build and upload
    runs-on: ubuntu-latest
    needs: [ version_increase, validate_gradle ]
    steps:
      - name: Checkout Git repo
        uses: actions/checkout@v2

      - name: Restore Gradle cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 17
      # This will automatically write ./.github/version.env
      # MAJOR_VERSION=X.X.X
      # PROJECT_NAME=YOUR_PROJECT_NAME
      - name: Write version to .env
        run: |
          chmod +x gradlew
          ./gradlew PublishPrimaryVersion --stacktrace

      - name: 'Set variables'
        id: vars
        run: |
          export $(cat .github/version.env | xargs)
          echo "major_version=${MAJOR_VERSION}" >> $GITHUB_OUTPUT
          echo "minor_version=${{ needs.version_increase.outputs.build_number }}" >> $GITHUB_OUTPUT
          echo "build_version=${MAJOR_VERSION}.${{needs.version_increase.outputs.build_number}} " >> $GITHUB_OUTPUT
          echo "PROJECT_NAME=${PROJECT_NAME}" >> $GITHUB_OUTPUT
          
          export BUILD_NUMBER=${MAJOR_VERSION}.${{needs.version_increase.outputs.build_number}}        
          
          echo ".github/version.env content:"
          echo "$(cat .github/version.env)"
          
          echo "saved vars:"
          echo "build_version=${build_version}"
          echo "MAJOR_VERSION=${MAJOR_VERSION}"
          echo "PROJECT_NAME=${PROJECT_NAME}"

      # Build shadowJar and rename .jar
      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew shadowJar --stacktrace
          mv jars/${{ steps.vars.outputs.PROJECT_NAME }}-${{ steps.vars.outputs.MAJOR_VERSION }}.jar jars/${{ steps.vars.outputs.PROJECT_NAME }}-${{ steps.vars.outputs.build_version }}.jar

      # No need to archive
#      - name: Archive plugin jars on GitHub
#        uses: actions/upload-artifact@v3
#        with:
#          name: ${{ steps.vars.outputs.PROJECT_NAME }}-${{ steps.vars.outputs.build_version }}
#          path: ./jars

      - name: Create internal Release
        id: create_internal_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.actions_token}}
        with:
          files: |
            ./jars/${{ steps.vars.outputs.PROJECT_NAME }}-${{ steps.vars.outputs.build_version }}.jar
          tag_name: ${{ steps.vars.outputs.build_version }}
          name: ${{ steps.vars.outputs.PROJECT_NAME }}-${{ steps.vars.outputs.build_version }}
          draft: false
          prerelease: true
